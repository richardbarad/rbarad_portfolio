st_drop_geometry(all_census_data) %>%
group_by(year, type) %>%
summarize(median_income = round(mean(median_income, na.rm = T),2),
median_rent = round(mean(median_rent, na.rm = T),2),
percent_transit = round(mean(pct_transit, na.rm = T),0),
percent_public = round(mean(pct_public, na.rm = T),0))
census_data_summary %>%
gather(Variable, Value, -year, -type) %>%
ggplot(aes(year, Value, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~Variable, scales = "free_y", ncol=4, strip.position = 'left',
labeller = as_labeller(c(median_income = 'Mean Annual Income (USD)',median_rent = 'Mean Monthly Rent (USD)',percent_transit='% Commuting on Public Transit',percent_public='% of Workers in Public Admin.'))) +
scale_fill_manual(values = c("#bae4bc", "#0868ac")) +
labs(title = "Indicator differences across time and space") +
theme_bw()+
ylab(NULL) +
xlab('Year')+
scale_y_continuous(labels = function(x) format(x, big.mark = ",",scientific = FALSE))+
theme(strip.background = element_blank(),
strip.placement = "outside")
all_census_data <- all_census_data %>%
mutate(public_class = cut(pct_public, breaks = c(0, 10, 15, 20, 25, max(all_census_data$pct_public, na.rm=TRUE))))
ggplot()+
geom_sf(data = all_census_data,linewidth=0.1,color='grey70',aes(fill = public_class))+
geom_sf(data = dcwater,fill='#5ee4ff',color=NA)+
geom_sf(data = tod_dissolve,fill='transparent',color='red',linewidth=1)+
geom_sf(data = dcmetro,size=1.3)+
ggtitle("Percent of Workers in Public Adminstration")+
facet_wrap(~year)+
scale_fill_manual(values = palette5,
name = "Percent",
na.value = 'grey80',
labels = c('<=10%','11 - 15%','16 - 20%','21 - 25%', '>25%'))+
theme_void()
all_census_data <- all_census_data %>%
mutate(public_class = cut(pct_public, breaks = c(0, 10, 15, 20, 25, max(all_census_data$pct_public, na.rm=TRUE))))
ggplot()+
geom_sf(data = all_census_data,linewidth=0.1,color='grey70',aes(fill = public_class))+
geom_sf(data = dcwater,fill='#5ee4ff',color=NA)+
geom_sf(data = tod_dissolve,fill='transparent',color='red',linewidth=1)+
geom_sf(data = dcmetro,size=1.3)+
ggtitle("Percent of Workers in Public Adminstration")+
facet_wrap(~year)+
scale_fill_manual(values = palette5,
name = "Percent",
na.value = 'grey80',
labels = c('<=10%','11 - 15%','16 - 20%','21 - 25%', '>25%'))+
mapTheme()
allTracts_17 <- all_census_data %>% filter(year == 2017)
allTracts_09 <- all_census_data %>% filter(year == 2009)
MRB <- multipleRingBuffer(st_union(dcmetro), 2640*10, 2640)
rings_17 <- st_join(st_centroid(allTracts_17), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_17, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings_09 <- st_join(st_centroid(allTracts_09), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_09, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings <- rbind(rings_17, rings_09)
rings <- dplyr::filter(rings, distance_miles != 3.5)
ggplot() +
#add line tod vs non tod and how many houses there are tod vs non tod
geom_line(data = rings, aes(x = distance_miles, y = median_rent, color = year), stat = "summary", fun = mean,linewidth=1)+
geom_point(data = rings, aes(x= distance_miles, y= median_rent, color= year), stat = "summary", fun = mean, size=4)+
ylim(0,2000)+
xlim(0.5,2.5)+
ggtitle('Rent as a function of distance to metro stops')+
scale_x_continuous(breaks = c(0.5,1,1.5,2,2.5),
labels = paste0(c("0m-0.5m", "0.51m - 1.0m", "1.01m - 1.50m", "1.51m - 2.00m", "2.01m - 2.50m")))+
xlab('Distance in miles')+
ylab('Mean Monthly rent (USD)')+
theme(panel.grid.minor= element_blank(),panel.grid.major.x= element_blank())
allTracts_17 <- all_census_data %>% filter(year == 2017)
allTracts_09 <- all_census_data %>% filter(year == 2009)
MRB <- multipleRingBuffer(st_union(dcmetro), 2640*10, 2640)
rings_17 <- st_join(st_centroid(allTracts_17), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_17, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings_09 <- st_join(st_centroid(allTracts_09), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_09, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings <- rbind(rings_17, rings_09)
rings <- dplyr::filter(rings, distance_miles != 3.5)
ggplot() +
#add line tod vs non tod and how many houses there are tod vs non tod
geom_line(data = rings, aes(x = distance_miles, y = median_rent, color = year), stat = "summary", fun = mean,linewidth=1)+
geom_point(data = rings, aes(x= distance_miles, y= median_rent, color= year), stat = "summary", fun = mean, size=3)+
ylim(0,2000)+
xlim(0.5,2.5)+
ggtitle('Rent as a function of distance to metro stops')+
scale_x_continuous(breaks = c(0.5,1,1.5,2,2.5),
labels = paste0(c("0m-0.5m", "0.51m - 1.0m", "1.01m - 1.50m", "1.51m - 2.00m", "2.01m - 2.50m")))+
xlab('Distance in miles')+
ylab('Mean Monthly rent (USD)')+
theme(panel.grid.minor= element_blank(),panel.grid.major.x= element_blank())+
theme_bw()
allTracts_17 <- all_census_data %>% filter(year == 2017)
allTracts_09 <- all_census_data %>% filter(year == 2009)
MRB <- multipleRingBuffer(st_union(dcmetro), 2640*10, 2640)
rings_17 <- st_join(st_centroid(allTracts_17), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_17, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings_09 <- st_join(st_centroid(allTracts_09), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_09, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings <- rbind(rings_17, rings_09)
rings <- dplyr::filter(rings, distance_miles != 3.5)
ggplot() +
#add line tod vs non tod and how many houses there are tod vs non tod
geom_line(data = rings, aes(x = distance_miles, y = median_rent, color = year), stat = "summary", fun = mean,linewidth=1)+
geom_point(data = rings, aes(x= distance_miles, y= median_rent, color= year), stat = "summary", fun = mean, size=3)+
ylim(0,2000)+
xlim(0.5,2.5)+
ggtitle('Rent as a function of distance to metro stops')+
scale_x_continuous(breaks = c(0.5,1,1.5,2,2.5),
labels = paste0(c("0m-0.5m", "0.51m - 1.0m", "1.01m - 1.50m", "1.51m - 2.00m", "2.01m - 2.50m")))+
xlab('Distance in miles')+
ylab('Mean Monthly rent (USD)')+
#theme(panel.grid.minor= element_blank(),panel.grid.major.x= element_blank())+
theme_bw()
allTracts_17 <- all_census_data %>% filter(year == 2017)
allTracts_09 <- all_census_data %>% filter(year == 2009)
MRB <- multipleRingBuffer(st_union(dcmetro), 2640*10, 2640)
rings_17 <- st_join(st_centroid(allTracts_17), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_17, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings_09 <- st_join(st_centroid(allTracts_09), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_09, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings <- rbind(rings_17, rings_09)
rings <- dplyr::filter(rings, distance_miles != 3.5)
ggplot() +
#add line tod vs non tod and how many houses there are tod vs non tod
geom_line(data = rings, aes(x = distance_miles, y = median_rent, color = year), stat = "summary", fun = mean,linewidth=1)+
geom_point(data = rings, aes(x= distance_miles, y= median_rent, color= year), stat = "summary", fun = mean, size=3)+
ylim(0,2000)+
xlim(0.5,2.5)+
ggtitle('Rent as a function of distance to metro stops')+
scale_x_continuous(breaks = c(0.5,1,1.5,2,2.5),
labels = paste0(c("0m-0.5m", "0.51m - 1.0m", "1.01m - 1.50m", "1.51m - 2.00m", "2.01m - 2.50m")))+
xlab('Distance in miles')+
ylab('Mean Monthly rent (USD)')+
theme(panel.grid.minor= element_blank(),panel.grid.major.x= element_blank())+
#theme_bw()
allTracts_17 <- all_census_data %>% filter(year == 2017)
allTracts_09 <- all_census_data %>% filter(year == 2009)
MRB <- multipleRingBuffer(st_union(dcmetro), 2640*10, 2640)
rings_17 <- st_join(st_centroid(allTracts_17), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_17, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings_09 <- st_join(st_centroid(allTracts_09), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_09, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings <- rbind(rings_17, rings_09)
rings <- dplyr::filter(rings, distance_miles != 3.5)
ggplot() +
#add line tod vs non tod and how many houses there are tod vs non tod
geom_line(data = rings, aes(x = distance_miles, y = median_rent, color = year), stat = "summary", fun = mean,linewidth=1)+
geom_point(data = rings, aes(x= distance_miles, y= median_rent, color= year), stat = "summary", fun = mean, size=3)+
ylim(0,2000)+
xlim(0.5,2.5)+
ggtitle('Rent as a function of distance to metro stops')+
scale_x_continuous(breaks = c(0.5,1,1.5,2,2.5),
labels = paste0(c("0m-0.5m", "0.51m - 1.0m", "1.01m - 1.50m", "1.51m - 2.00m", "2.01m - 2.50m")))+
xlab('Distance in miles')+
ylab('Mean Monthly rent (USD)')+
theme(panel.grid.minor= element_blank(),panel.grid.major.x= element_blank())
allTracts_17 <- all_census_data %>% filter(year == 2017)
allTracts_09 <- all_census_data %>% filter(year == 2009)
MRB <- multipleRingBuffer(st_union(dcmetro), 2640*10, 2640)
rings_17 <- st_join(st_centroid(allTracts_17), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_17, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings_09 <- st_join(st_centroid(allTracts_09), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_09, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings <- rbind(rings_17, rings_09)
rings <- dplyr::filter(rings, distance_miles != 3.5)
ggplot() +
#add line tod vs non tod and how many houses there are tod vs non tod
geom_line(data = rings, aes(x = distance_miles, y = median_rent, color = year), stat = "summary", fun = mean,linewidth=1.5)+
geom_point(data = rings, aes(x= distance_miles, y= median_rent, color= year), stat = "summary", fun = mean, size=3)+
ylim(0,2000)+
xlim(0.5,2.5)+
ggtitle('Rent as a function of distance to metro stops')+
scale_x_continuous(breaks = c(0.5,1,1.5,2,2.5),
labels = paste0(c("0m-0.5m", "0.51m - 1.0m", "1.01m - 1.50m", "1.51m - 2.00m", "2.01m - 2.50m")))+
xlab('Distance in miles')+
ylab('Mean Monthly rent (USD)')+
theme_bw()
allTracts_17 <- all_census_data %>% filter(year == 2017)
allTracts_09 <- all_census_data %>% filter(year == 2009)
MRB <- multipleRingBuffer(st_union(dcmetro), 2640*10, 2640)
rings_17 <- st_join(st_centroid(allTracts_17), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_17, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings_09 <- st_join(st_centroid(allTracts_09), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_09, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings <- rbind(rings_17, rings_09)
rings <- dplyr::filter(rings, distance_miles != 3.5)
ggplot() +
#add line tod vs non tod and how many houses there are tod vs non tod
geom_line(data = rings, aes(x = distance_miles, y = median_rent, color = year), stat = "summary", fun = mean,linewidth=1.5)+
geom_point(data = rings, aes(x= distance_miles, y= median_rent, color= year), stat = "summary", fun = mean, size=4)+
ylim(0,2000)+
xlim(0.5,2.5)+
ggtitle('Rent as a function of distance to metro stops')+
scale_x_continuous(breaks = c(0.5,1,1.5,2,2.5),
labels = paste0(c("0m-0.5m", "0.51m - 1.0m", "1.01m - 1.50m", "1.51m - 2.00m", "2.01m - 2.50m")))+
xlab('Distance in miles')+
ylab('Mean Monthly rent (USD)')+
theme_bw()
allTracts_17 <- all_census_data %>% filter(year == 2017)
allTracts_09 <- all_census_data %>% filter(year == 2009)
MRB <- multipleRingBuffer(st_union(dcmetro), 2640*10, 2640)
rings_17 <- st_join(st_centroid(allTracts_17), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_17, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings_09 <- st_join(st_centroid(allTracts_09), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_09, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings <- rbind(rings_17, rings_09)
rings <- dplyr::filter(rings, distance_miles != 3.5)
ggplot() +
#add line tod vs non tod and how many houses there are tod vs non tod
geom_line(data = rings, aes(x = distance_miles, y = median_rent, color = year), stat = "summary", fun = mean,linewidth=1.3)+
geom_point(data = rings, aes(x= distance_miles, y= median_rent, color= year), stat = "summary", fun = mean, size=4)+
ylim(0,2000)+
xlim(0.5,2.5)+
ggtitle('Rent as a function of distance to metro stops')+
scale_x_continuous(breaks = c(0.5,1,1.5,2,2.5),
labels = paste0(c("0m-0.5m", "0.51m - 1.0m", "1.01m - 1.50m", "1.51m - 2.00m", "2.01m - 2.50m")))+
xlab('Distance in miles')+
ylab('Mean Monthly rent (USD)')+
theme_bw()
allTracts_17 <- all_census_data %>% filter(year == 2017)
allTracts_09 <- all_census_data %>% filter(year == 2009)
MRB <- multipleRingBuffer(st_union(dcmetro), 2640*10, 2640)
rings_17 <- st_join(st_centroid(allTracts_17), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_17, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings_09 <- st_join(st_centroid(allTracts_09), MRB, join = st_intersects) %>%
st_drop_geometry() %>%
select('GEOID','distance') %>%
left_join(allTracts_09, by = "GEOID") %>%
mutate(distance_miles = distance / 5280) %>%
st_sf()
rings <- rbind(rings_17, rings_09)
rings <- dplyr::filter(rings, distance_miles != 3.5)
ggplot() +
#add line tod vs non tod and how many houses there are tod vs non tod
geom_line(data = rings, aes(x = distance_miles, y = median_rent, color = year), stat = "summary", fun = mean,linewidth=1.3)+
geom_point(data = rings, aes(x= distance_miles, y= median_rent, color= year), stat = "summary", fun = mean, size=3)+
ylim(0,2000)+
xlim(0.5,2.5)+
ggtitle('Rent as a function of distance to metro stops')+
scale_x_continuous(breaks = c(0.5,1,1.5,2,2.5),
labels = paste0(c("0m-0.5m", "0.51m - 1.0m", "1.01m - 1.50m", "1.51m - 2.00m", "2.01m - 2.50m")))+
xlab('Distance in miles')+
ylab('Mean Monthly rent (USD)')+
theme_bw()
knitr::opts_chunk$set(echo = TRUE, warning=FALSE,message=FALSE)
library(tidyverse)
library(sf)
library(lubridate)
library(tidycensus)
library(viridis)
library(riem)
library(gridExtra)
library(imputeTS)
library(caret)
library(ggpubr)
library(tigris)
library(ggspatial)
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.2),
axis.ticks=element_blank())
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
B_Jun2023 <- read.csv('C:/Users/richa/OneDrive/Documents/GitHub/musa_5080_HW/HW6_Bike_predictions/Data/202306-bluebikes-tripdata.csv')
B_Jun2023 <- read.csv('C:/Users/richa/GitHub/musa_5080_HW/HW6_Bike_predictions/Data/202306-bluebikes-tripdata.csv')
B_Jul2023 <- read.csv('C:/Users/richa/GitHub/musa_5080_HW/HW6_Bike_predictions/Data/202307-bluebikes-tripdata.csv')
Data <- rbind(B_Jun2023,B_Jul2023) %>%
mutate(start_station_name = ifelse(start_station_name == 'Graham and Parks School – Linnaean St at Walker St','Graham and Parks School',start_station_name))
bike_data <- read.csv('C:/Users/richa/OneDrive/Documents/GitHub/musa_5080_HW/HW6_Bike_predictions/Data/current_bluebikes_stations.csv') %>%
filter(District != 'Salem' & Name != 'BCBS Hingham') %>%
st_as_sf(coords = c("Longitude", "Latitude"), crs='EPSG:4326') %>% st_transform(2249)
B_Jun2023 <- read.csv('C:/Users/richa/GitHub/musa_5080_HW/HW6_Bike_predictions/Data/202306-bluebikes-tripdata.csv')
B_Jul2023 <- read.csv('C:/Users/richa/GitHub/musa_5080_HW/HW6_Bike_predictions/Data/202307-bluebikes-tripdata.csv')
Data <- rbind(B_Jun2023,B_Jul2023) %>%
mutate(start_station_name = ifelse(start_station_name == 'Graham and Parks School – Linnaean St at Walker St','Graham and Parks School',start_station_name))
bike_data <- read.csv('C:/Users/richa/GitHub/musa_5080_HW/HW6_Bike_predictions/Data/current_bluebikes_stations.csv') %>%
filter(District != 'Salem' & Name != 'BCBS Hingham') %>%
st_as_sf(coords = c("Longitude", "Latitude"), crs='EPSG:4326') %>% st_transform(2249)
rm(B_Jun2023)
rm(B_Jul2023)
Data2 <- Data %>%
mutate(interval60 = floor_date(ymd_hms(started_at), unit = "60 mins")) %>%
group_by(start_station_name,interval60) %>% tally()
df_list <- list()
stations <- unique(Data2$start_station_name)
for (station in stations){
interval60 = seq(ymd_hms('2023-06-01 00.00.00'), ymd_hms('2023-08-01 00.00.00'), by='60 mins')
frame <-data.frame(interval60,Name=station)
df_list <- append(df_list,list(frame))}
holidays = c('2023-06-19','2023-07-04')
all_data <- bind_rows(df_list) %>%
left_join(.,Data2,join_by(interval60 == interval60,Name==start_station_name)) %>%
mutate(week = week(interval60),
dotw = wday(interval60, label=TRUE),
day = floor_date(interval60, unit = "day"),
month = floor_date(interval60, unit = "month"),
sum_rides = replace_na(n,0),
holiday = ifelse(substr(interval60,start=1,stop=10) %in% holidays, 1,0),
is_weekend = ifelse(dotw %in% c('Sat','Sun'),1,0),
time_of_day = case_when(hour(interval60) < 5 | hour(interval60) >= 23 ~ "Overnight",
hour(interval60) >= 5 & hour(interval60) < 10 ~ "AM Commute",
hour(interval60) >= 10 & hour(interval60) < 15 ~ "Mid-Day",
hour(interval60) >= 15 & hour(interval60) <= 19 ~ "PM Commute",
hour(interval60) >= 20 & hour(interval60) <23 ~ "Evening")) %>%
dplyr::select(-n) %>%
dplyr::filter(month != 1690848000)
rm(Data2)
rm(df_list)
rm(frame)
rm(station)
rm(stations)
rm(interval60)
all_data <- all_data %>%
arrange(Name,interval60) %>%
group_by(Name) %>%
mutate(lag24Hour = dplyr::lag(sum_rides,24),
lag1week = dplyr::lag(sum_rides,24 * 7),
clean_lag = ifelse(dotw %in% c('Mon','Sat'),lag1week,lag24Hour),
week = ifelse(week==31,30,week))
BostonCensus <-
get_acs(geography = "tract",
variables = c("B01003_001", "B19013_001",
"B02001_002", "B08013_001",
"B08012_001", "B08301_001",
"B08301_010", "B01002_001"),
year = 2021,
state = "MA",
geometry = TRUE,
county=c("Suffolk","Norfolk","Middlesex","Essex"),
output = "wide") %>%
rename(Total_Pop =  B01003_001E,
Med_Inc = B19013_001E,
Med_Age = B01002_001E,
White_Pop = B02001_002E,
Travel_Time = B08013_001E,
Num_Commuters = B08012_001E,
Means_of_Transport = B08301_001E,
Total_Public_Trans = B08301_010E) %>%
dplyr::select(Total_Pop, Med_Inc, White_Pop, Travel_Time,
Means_of_Transport, Total_Public_Trans,
Med_Age,
GEOID, geometry) %>%
mutate(Percent_White = White_Pop / Total_Pop,
Mean_Commute_Time = Travel_Time / Total_Public_Trans,
Percent_Taking_Public_Trans = Total_Public_Trans / Means_of_Transport) %>%
st_transform(2249)
bike_data <- bike_data %>% st_as_sf(coords = c('Longitude','Latitude'),crs='EPSG:4326') %>% st_transform(2249) %>%
st_join(.,BostonCensus,join=st_intersects,left = TRUE) %>%
filter(District != 'Salem' & Name != 'BCBS Hingham')
weather.Panel <-
riem_measures(station = "BOS", date_start = "2023-06-25", date_end = "2023-08-01") %>%
mutate(interval60 = floor_date(ymd_hms(valid),unit='60 mins')) %>%
group_by(interval60) %>%
summarize(Temperature = mean(tmpf,na.rm=T),
Precip = sum(p01i, na.rm=T),
Wind_Speed = mean(sknt, na.rm=T)) %>%
mutate(Temperature = na_kalman(Temperature))
rainy_hours <- weather.Panel %>%
dplyr::filter(Precip > 0.07)
## Make a time series graph
all_data <- all_data %>%
left_join(.,bike_data %>% dplyr::select(-Public,-Number),by='Name') %>%
left_join(.,weather.Panel,by='interval60') %>%
dplyr::filter(District != 'Salem') %>%
dplyr::filter(Name != 'BCBS Hingham') %>%
st_as_sf()
all_data <- dplyr::filter(all_data,week >= 26)
training <- dplyr::filter(all_data, week <= 28)
test <- dplyr::filter(all_data, week > 28)
View(test)
View(training)
library(tigris)
library(tidyverse)
library(sf)
library(httr2)
states1 <- states() %>%
filter(STUSPS %in% c('PA','NJ','DE','NY','MD')) %>% st_transform(proj)
library(tigris)
library(tidyverse)
library(sf)
library(httr2)
options(tigris_use_cache = TRUE)
proj <- 26918
states1 <- states() %>%
filter(STUSPS %in% c('PA','NJ','DE','NY','MD')) %>% st_transform(proj)
states2 <- states1 %>% filter(STUSPS %in% c('PA','NJ','DE'))
de_river_basin <- st_read('https://services8.arcgis.com/5Wj4rmM3lycu9Zo6/arcgis/rest/services/DRB_SAs/FeatureServer/0/query?f=geojson&where=1=1') %>%
st_transform(proj)
#Intersect study DE, PA, and DE with Delaware River Basin to create study Area
study_area <- st_intersection(de_river_basin,st_union(states2))
states1 <- states() %>%
filter(STUSPS %in% c('PA','NJ','DE','NY','MD')) %>% st_transform(proj)
states2 <- states1 %>% filter(STUSPS %in% c('PA','NJ','DE'))
de_river_basin <- st_read('https://services8.arcgis.com/5Wj4rmM3lycu9Zo6/arcgis/rest/services/DRB_SAs/FeatureServer/0/query?f=geojson&where=1=1') %>%
st_transform(proj)
#Intersect study DE, PA, and DE with Delaware River Basin to create study Area
study_area <- st_intersection(de_river_basin,st_union(states2))
ggplot()+
geom_sf(data=study_area,color='transparent',fill='orange')+
geom_sf(data=de_river_basin,color='lightblue', fill='transparent',linewidth=1.5)+
geom_sf(data=states2,color='black',fill='transparent')+
theme_void()
library(tigris)
library(tidyverse)
library(sf)
library(httr2)
options(tigris_use_cache = TRUE)
proj <- 26918
states1 <- states() %>%
filter(STUSPS %in% c('PA','NJ','DE','NY','MD')) %>% st_transform(proj)
states2 <- states1 %>% filter(STUSPS %in% c('PA','NJ','DE'))
de_river_basin <- st_read('https://services8.arcgis.com/5Wj4rmM3lycu9Zo6/arcgis/rest/services/DRB_SAs/FeatureServer/0/query?f=geojson&where=1=1') %>%
st_transform(proj)
#Intersect study DE, PA, and DE with Delaware River Basin to create study Area
study_area <- st_intersection(de_river_basin,st_union(states2))
ggplot()+
geom_sf(data=study_area,color='transparent',fill='orange')+
geom_sf(data=de_river_basin,color='lightblue', fill='transparent',linewidth=1.5)+
geom_sf(data=states2,color='black',fill='transparent')+
theme_void()
